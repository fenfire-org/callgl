boolean AreTexturesResident( sizei n, uint *textures, boolean *residences ) ;
boolean IsEnabled( enum value ) ;
boolean IsList( uint list ) ;
boolean IsTexture( uint texture ) ;
enum GetError( void ) ;
int RenderMode( enum mode ) ;
ubyte *GetString( enum name ) ;
uint GenLists( sizei s ) ;
void Accum( enum op, float value ) ;
void AlphaFunc( enum func, clampf ref ) ;
void ArrayElement( int i ) ;
void Begin( enum mode ) ;
void BindTexture( enum target, uint texture ) ;
void Bitmap( sizei w, sizei h, float , float , float , float , ubyte *data ) ;
void BlendFunc( enum src, enum dst ) ;
void CallList( uint n ) ;
void CallLists( sizei n, enum type, void *lists ) ;
void Clear( bitfield buf ) ;
void ClearAccum( float r, float g, float b, float a ) ;
void ClearColor( clampf r, clampf g, clampf b, clampf a ) ;
void ClearDepth( clampd d ) ;
void ClearIndex( float index ) ;
void ClearStencil( int s ) ;
void ClipPlane( enum p, double eqn4 ) ;(
void Color3b( T components ) ;
void Color3bv( T components ) ;
void Color3d( T components ) ;
void Color3dv( T components ) ;
void Color3f( T components ) ;
void Color3fv( T components ) ;
void Color3i( T components ) ;
void Color3iv( T components ) ;
void Color3s( T components ) ;
void Color3sv( T components ) ;
void Color3ub( T components ) ;
void Color3ubv( T components ) ;
void Color3ui( T components ) ;
void Color3uiv( T components ) ;
void Color3us( T components ) ;
void Color3usv( T components ) ;
void Color4b( T components ) ;
void Color4bv( T components ) ;
void Color4d( T components ) ;
void Color4dv( T components ) ;
void Color4f( T components ) ;
void Color4fv( T components ) ;
void Color4i( T components ) ;
void Color4iv( T components ) ;
void Color4s( T components ) ;
void Color4sv( T components ) ;
void Color4ub( T components ) ;
void Color4ubv( T components ) ;
void Color4ui( T components ) ;
void Color4uiv( T components ) ;
void Color4us( T components ) ;
void Color4usv( T components ) ;
void ColorMask( boolean r, boolean g, boolean b, boolean a ) ;
void ColorMaterial( enum face, enum mode ) ;
void ColorPointer( int size, enum type, sizei stride, void *pointer ) ;
void CopyPixels( int x, int y, sizei width, sizei height, enum type ) ;
void CopyTexImage1D( enum target, int level, enum internalformat, int x, int y, sizei width, int border ) ;
void CopyTexImage2D( enum target, int level, enum internalformat, int x, int y, sizei width, sizei height, int border ) ;
void CopyTexSubImage1D( enum target, int level, int xoffset, int x, int y, sizei width ) ;
void CopyTexSubImage2D( enum target, int level, int xoffset, int yoffset, int x, int y, sizei width, sizei height ) ;
void CullFace( enum mode ) ;
void DeleteLists( uint list, sizei range ) ;
void DeleteTextures( sizei n, uint *textures ) ;
void DepthFunc( enum func ) ;
void DepthMask( boolean mask ) ;
void DepthRange( clampd n, clampd f ) ;
void Disable( enum target ) ;
void DisableClientState( enum array ) ;
void DrawArrays( enum mode, int first, sizei count ) ;
void DrawBuffer( enum buf ) ;
void DrawElements( enum mode, sizei count, enum type, void *indices ) ;
void DrawPixels( sizei width, sizei height, enum format, enum type, void *data ) ;
void EdgeFlag( boolean flag ) ;
void EdgeFlagPointer( sizei stride, void *pointer ) ;
void EdgeFlagv( boolean *flag ) ;
void Enable( enum target ) ;
void EnableClientState( enum array ) ;
void End( void ) ;
void EndList( void ) ;
void EvalCoord1d( T arg ) ;
void EvalCoord1dv( T arg ) ;
void EvalCoord1f( T arg ) ;
void EvalCoord1fv( T arg ) ;
void EvalCoord2d( T arg ) ;
void EvalCoord2dv( T arg ) ;
void EvalCoord2f( T arg ) ;
void EvalCoord2fv( T arg ) ;
void EvalMesh1( enum mode, int , int ) ;
void EvalMesh2( enum mode, int , int , int , int ) ;
void EvalPoint1( int p ) ;
void EvalPoint2( int p, int q ) ;
void FeedbackBuffer( sizei n, enum type, float *buffer ) ;
void Finish( void ) ;
void Flush( void ) ;
void Fogf( enum pname, T param ) ;
void Fogfv( enum pname, T params ) ;
void Fogi( enum pname, T param ) ;
void Fogiv( enum pname, T params ) ;
void FrontFace( enum dir ) ;
void Frustum( double l, double r, double b, double t, double n, double f ) ;
void GenTextures( sizei n, uint *textures ) ;
void GetBooleanv( enum value, boolean *data ) ;
void GetClipPlane( enum plane, double eqn4 ) ;(
void GetDoublev( enum value, double *data ) ;
void GetFloatv( enum value, float *data ) ;
void GetIntegerv( enum value, int *data ) ;
void GetLightfv( enum light, enum value, T data ) ;
void GetLightiv( enum light, enum value, T data ) ;
void GetMapdv( enum map, enum value, T data ) ;
void GetMapfv( enum map, enum value, T data ) ;
void GetMapiv( enum map, enum value, T data ) ;
void GetMaterialfv( enum face, enum value, T data ) ;
void GetMaterialiv( enum face, enum value, T data ) ;
void GetPixelMapfv( enum map, T data) ;
void GetPixelMapuiv( enum map, T data) ;
void GetPixelMapusv( enum map, T data) ;
void GetPointerv( enum pname, void **params ) ;
void GetPolygonStipple( void *pattern ) ;
void GetTexEnvfv( enum env, enum value, T data ) ;
void GetTexEnviv( enum env, enum value, T data ) ;
void GetTexGenfv( enum coord, enum value, T data ) ;
void GetTexGeniv( enum coord, enum value, T data ) ;
void GetTexImage( enum tex, int lod, enum format, enum type, void *img ) ;
void GetTexLevelParameterfv( enum target, int lod, enum value, T data ) ;
void GetTexLevelParameteriv( enum target, int lod, enum value, T data ) ;
void GetTexParameterfv( enum target, enum value, T data ) ;
void GetTexParameteriv( enum target, enum value, T data ) ;
void Hint( enum target, enum hint ) ;
void IndexMask( uint mask ) ;
void IndexPointer( enum type, sizei stride, void *pointer ) ;
void Indexd( T index ) ;
void Indexdv( T index ) ;
void Indexf( T index ) ;
void Indexfv( T index ) ;
void Indexi( T index ) ;
void Indexiv( T index ) ;
void Indexs( T index ) ;
void Indexsv( T index ) ;
void Indexub( T index ) ;
void Indexubv( T index ) ;
void InitNames( void ) ;
void InterleavedArrays( enum format, sizei stride, void *pointer ) ;
void LightModelf( enum pname, T param ) ;
void LightModelfv( enum pname, T params ) ;
void LightModeli( enum pname, T param ) ;
void LightModeliv( enum pname, T params ) ;
void Lightf( enum light, enum pname, T param ) ;
void Lightfv( enum light, enum pname, T params ) ;
void Lighti( enum light, enum pname, T param ) ;
void Lightiv( enum light, enum pname, T params ) ;
void LineStipple( int factor, ushort pattern ) ;
void LineWidth( float width ) ;
void ListBase( uint base ) ;
void LoadIdentity( void ) ;
void LoadMatrixd( T m[16] ) ;
void LoadMatrixf( T m[16] ) ;
void LoadName( uint name ) ;
void LogicOp( enum op ) ;
void Map1d( enum type, T , T , int stride, int order, T points ) ;
void Map1f( enum type, T , T , int stride, int order, T points ) ;
void Map2d( enum target, T , T , int ustride, int uorder, T , T , int vstride, int vorder, T points ) ;
void Map2f( enum target, T , T , int ustride, int uorder, T , T , int vstride, int vorder, T points ) ;
void MapGrid1d( int n, T , T ) ;
void MapGrid1f( int n, T , T ) ;
void MapGrid2d( int , T , T , int , T , T ) ;
void MapGrid2f( int , T , T , int , T , T ) ;
void Materialf( enum face, enum pname, T param ) ;
void Materialfv( enum face, enum pname, T params ) ;
void Materiali( enum face, enum pname, T param ) ;
void Materialiv( enum face, enum pname, T params ) ;
void MatrixMode( enum mode ) ;
void MultMatrixd( T m[16] ) ;
void MultMatrixf( T m[16] ) ;
void NewList( uint n, enum mode ) ;
void Normal3b( T coords ) ;
void Normal3bv( T coords ) ;
void Normal3d( T arg ) ;
void Normal3d( T coords ) ;
void Normal3d( double arg1, double arg2, double arg3 ) ;
void Normal3dv( T arg ) ;
void Normal3dv( T coords ) ;
void Normal3dv( double arg3 ) ;(
void Normal3f( T arg ) ;
void Normal3f( T coords ) ;
void Normal3f( float arg1, float arg2, float arg3 ) ;
void Normal3fv( T arg ) ;
void Normal3fv( T coords ) ;
void Normal3fv( float arg3 ) ;(
void Normal3i( T coords ) ;
void Normal3iv( T coords ) ;
void Normal3s( T coords ) ;
void Normal3sv( T coords ) ;
void NormalPointer( enum type, sizei stride, void *pointer ) ;
void Ortho( double l, double r, double b, double t, double n, double f ) ;
void PassThrough( float token ) ;
void PixelMapfv( enum map, sizei size , T *values) ;
void PixelMapuiv( enum map, sizei size , T *values) ;
void PixelMapusv( enum map, sizei size , T *values) ;
void PixelStoref( enum pname, T param ) ;
void PixelStorei( enum pname, T param ) ;
void PixelTransferf( enum param, T value ) ;
void PixelTransferi( enum param, T value ) ;
void PixelZoom( float , float ) ;
void PointSize( float size ) ;
void PolygonMode( enum face, enum mode ) ;
void PolygonOffset( float factor, float units ) ;
void PolygonStipple( ubyte *pattern ) ;
void PopAttrib( void ) ;
void PopClientAttrib( void ) ;
void PopMatrix( void ) ;
void PopName( void ) ;
void PrioritizeTextures( sizei n, uint *textures, clampf *priorities ) ;
void PushAttrib( bitfield mask ) ;
void PushClientAttrib( bitfield mask ) ;
void PushMatrix( void ) ;
void PushName( uint name ) ;
void RasterPos2d( T coords ) ;
void RasterPos2dv( T coords ) ;
void RasterPos2f( T coords ) ;
void RasterPos2fv( T coords ) ;
void RasterPos2i( T coords ) ;
void RasterPos2iv( T coords ) ;
void RasterPos2s( T coords ) ;
void RasterPos2sv( T coords ) ;
void RasterPos3d( T coords ) ;
void RasterPos3dv( T coords ) ;
void RasterPos3f( T coords ) ;
void RasterPos3fv( T coords ) ;
void RasterPos3i( T coords ) ;
void RasterPos3iv( T coords ) ;
void RasterPos3s( T coords ) ;
void RasterPos3sv( T coords ) ;
void RasterPos4d( T coords ) ;
void RasterPos4dv( T coords ) ;
void RasterPos4f( T coords ) ;
void RasterPos4fv( T coords ) ;
void RasterPos4i( T coords ) ;
void RasterPos4iv( T coords ) ;
void RasterPos4s( T coords ) ;
void RasterPos4sv( T coords ) ;
void ReadBuffer( enum src ) ;
void ReadPixels( int x, int y, sizei width, sizei height, enum format, enum type, void *data ) ;
void Rectd( T x1, T y1, T x2, T y2 ) ;
void Rectdv( T v1[2], T v2[2] ) ;
void Rectf( T x1, T y1, T x2, T y2 ) ;
void Rectfv( T v1[2], T v2[2] ) ;
void Recti( T x1, T y1, T x2, T y2 ) ;
void Rectiv( T v1[2], T v2[2] ) ;
void Rects( T x1, T y1, T x2, T y2 ) ;
void Rectsv( T v1[2], T v2[2] ) ;
void Rotated( T , T x, T y, T z ) ;
void Rotatef( T , T x, T y, T z ) ;
void Scaled( T x, T y, T z ) ;
void Scalef( T x, T y, T z ) ;
void Scissor( int left, int bottom, sizei width, sizei height ) ;
void SelectBuffer( sizei n, uint *buffer ) ;
void ShadeModel( enum mode ) ;
void StencilFunc( enum func, int ref, uint mask ) ;
void StencilMask( uint mask ) ;
void StencilOp( enum sfail, enum dpfail, enum dppass ) ;
void TexCoord1d( T coords ) ;
void TexCoord1dv( T coords ) ;
void TexCoord1f( T coords ) ;
void TexCoord1fv( T coords ) ;
void TexCoord1i( T coords ) ;
void TexCoord1iv( T coords ) ;
void TexCoord1s( T coords ) ;
void TexCoord1sv( T coords ) ;
void TexCoord2d( T coords ) ;
void TexCoord2dv( T coords ) ;
void TexCoord2f( T coords ) ;
void TexCoord2fv( T coords ) ;
void TexCoord2i( T coords ) ;
void TexCoord2iv( T coords ) ;
void TexCoord2s( T coords ) ;
void TexCoord2sv( T coords ) ;
void TexCoord3d( T coords ) ;
void TexCoord3dv( T coords ) ;
void TexCoord3f( T coords ) ;
void TexCoord3fv( T coords ) ;
void TexCoord3i( T coords ) ;
void TexCoord3iv( T coords ) ;
void TexCoord3s( T coords ) ;
void TexCoord3sv( T coords ) ;
void TexCoord4d( T coords ) ;
void TexCoord4dv( T coords ) ;
void TexCoord4f( T coords ) ;
void TexCoord4fv( T coords ) ;
void TexCoord4i( T coords ) ;
void TexCoord4iv( T coords ) ;
void TexCoord4s( T coords ) ;
void TexCoord4sv( T coords ) ;
void TexCoordPointer( int size, enum type, sizei stride, void *pointer ) ;
void TexEnvf( enum target, enum pname, T param ) ;
void TexEnvfv( enum target, enum pname, T params ) ;
void TexEnvi( enum target, enum pname, T param ) ;
void TexEnviv( enum target, enum pname, T params ) ;
void TexGend( enum coord, enum pname, T param ) ;
void TexGendv( enum coord, enum pname, T params ) ;
void TexGenf( enum coord, enum pname, T param ) ;
void TexGenfv( enum coord, enum pname, T params ) ;
void TexGeni( enum coord, enum pname, T param ) ;
void TexGeniv( enum coord, enum pname, T params ) ;
void TexImage1D( enum target, int level, int internalformat, sizei width, int border, enum format, enum type, void *data ) ;
void TexImage2D( enum target, int level, int internalformat, sizei width, sizei height, int border, enum format, enum type, void *data ) ;
void TexParameterf( enum target, enum pname, T param ) ;
void TexParameterfv( enum target, enum pname, T params ) ;
void TexParameteri( enum target, enum pname, T param ) ;
void TexParameteriv( enum target, enum pname, T params ) ;
void TexSubImage1D( enum target, int level, int xoffset, sizei width, enum format, enum type, void *data ) ;
void TexSubImage2D( enum target, int level, int xoffset, int yoffset, sizei width, sizei height, enum format, enum type, void *data ) ;
void Translated( T x, T y, T z ) ;
void Translatef( T x, T y, T z ) ;
void Vertex2d( T coords ) ;
void Vertex2dv( T coords ) ;
void Vertex2f( T coords ) ;
void Vertex2fv( T coords ) ;
void Vertex2i( T coords ) ;
void Vertex2iv( T coords ) ;
void Vertex2s( T coords ) ;
void Vertex2sv( T coords ) ;
void Vertex2sv( short v2 ) ;(
void Vertex3d( T coords ) ;
void Vertex3dv( T coords ) ;
void Vertex3f( T coords ) ;
void Vertex3f( float x, float y, float z ) ;
void Vertex3fv( T coords ) ;
void Vertex3i( T coords ) ;
void Vertex3iv( T coords ) ;
void Vertex3s( T coords ) ;
void Vertex3sv( T coords ) ;
void Vertex4d( T coords ) ;
void Vertex4dv( T coords ) ;
void Vertex4f( T coords ) ;
void Vertex4fv( T coords ) ;
void Vertex4i( T coords ) ;
void Vertex4iv( T coords ) ;
void Vertex4s( T coords ) ;
void Vertex4sv( T coords ) ;
void VertexPointer( int size, enum type, sizei stride, void *pointer ) ;
void Viewport( int x, int y, sizei w, sizei h ) ;
